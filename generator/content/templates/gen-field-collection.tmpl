package {{ .Target.Package }}

import (
	"encoding/json"
	"fmt"
	"github.com/fanky5g/ponzu/content"
)

type {{ .Definition.Name }} []content.FieldCollection

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) Name() string {
	return "{{ .Definition.Label }}"
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) Data() []content.FieldCollection {
	if p == nil {
		return nil
	}

	return *p
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) AllowedTypes() map[string]content.Builder {
	return map[string]content.Builder{
	    {{- range .Definition.Blocks }}
	        "{{ .TypeName }}": func() interface{} {
                return new({{ .TypeName }})
            },
	    {{- end }}
	}
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) Add(fieldCollection content.FieldCollection) {
	*p = append(*p, fieldCollection)
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) Set(i int, fieldCollection content.FieldCollection) {
	data := p.Data()
	data[i] = fieldCollection
	*p = data
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) SetData(data []content.FieldCollection) {
	*p = data
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) UnmarshalJSON(b []byte) error {
	if p == nil {
		*p = make([]content.FieldCollection, 0)
	}

	allowedTypes := p.AllowedTypes()

	var value []content.FieldCollection
	if err := json.Unmarshal(b, &value); err != nil {
		return err
	}

	for i, t := range value {
		builder, ok := allowedTypes[t.Type]
		if !ok {
			return fmt.Errorf("type %s not implemented", t.Type)
		}

		entity := builder()
		byteRepresentation, err := json.Marshal(t.Value)
		if err != nil {
			return err
		}

		if err = json.Unmarshal(byteRepresentation, entity); err != nil {
			return err
		}

		value[i].Value = entity
	}

	*p = value
	return nil
}

func init() {
	FieldCollections["{{ .Definition.Name }}"] = func() interface{} {
		return new({{ .Definition.Name }})
	}
}
