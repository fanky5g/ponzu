package {{ .Target.Package }}

import (
	"fmt"
	"reflect"
	"github.com/fanky5g/ponzu/content/editor"
	"github.com/fanky5g/ponzu/config"
	"github.com/fanky5g/ponzu/content/item"
	"github.com/fanky5g/ponzu/tokens"
)

type {{ .Definition.Name }} struct {
    item.Item

    {{ range .Fields nil }}{{ .Name }} {{ .TypeName }} `json:"{{ .JSONName }}"`
    {{ end }}	
}

// MarshalEditor writes a buffer of views to edit a {{ .Definition.Name }} within the CMS
// and implements editor.Editable
func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) MarshalEditor(paths config.Paths) ([]byte, error) {
	view, err := editor.Form({{ .Definition.Metadata.MethodReceiverName }},
	    paths,
        // Take note that the first argument to these Input-like functions 
        // is the string version of each {{ .Definition.Name }} field, and must follow
        // this pattern for auto-decoding and auto-encoding reasons:
        {{ range .Fields nil }}editor.Field{
			{{ .View }}
		},
		{{ end }}
	)

	if err != nil {
		return nil, fmt.Errorf("failed to render {{ .Definition.Name }} editor view: %s", err.Error())
	}

	return view, nil
}

func init() {
	Content["{{ .Definition.Name }}"] = func() interface{} { return new({{ .Definition.Name }}) }
}

// IndexContent determines if {{ .Definition.Name }} should be indexed for searching
func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) IndexContent() bool {
	return false
}

// GetSearchableAttributes defines fields of {{ .Definition.Name }} that should be indexed
func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) GetSearchableAttributes() map[string]reflect.Type {
	searchableAttributes := make(map[string]reflect.Type)
	idField := "ID"
	v := reflect.Indirect(reflect.ValueOf({{ .Definition.Metadata.MethodReceiverName }}))
    searchableAttributes[idField] = v.FieldByName(idField).Type()

	t := v.Type()
	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		fieldName := t.Field(i).Name

		if fieldName != idField && field.Kind() == reflect.String {
			searchableAttributes[fieldName] = field.Type()
		}
	}

	return searchableAttributes
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) GetTitle() string {
    return {{ .Definition.Metadata.MethodReceiverName }}.ID
}

func ({{ .Definition.Metadata.MethodReceiverName }} *{{ .Definition.Name }}) GetRepositoryToken() tokens.RepositoryToken {
	return "{{ .Definition.Name | RepositoryToken }}"
}